apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: update-version
spec:
  params:
    - name: verbose
      description: Log the commands that are executed during the operation.
      type: string
      default: "false"  
    - name: iacRepositoryUrl
      description: Git repository containing manifest files to update
    - name: userHome
      description: Absolute path to the user's home directory.
      type: string
      default: "/root"
    - name: projectDir
      description: Relative path to the project's directory.
      type: string
      default: "demo-app-iac"            
  workspaces:
    - name: code-source
    - name: iac-source
    - name: ssh-directory  
  steps:  
    - name: update-version
      image: alpine/git
      workingDir: /workspace/iac-source
      env:
      - name: PARAM_VERBOSE
        value: $(params.verbose)      
      - name: IAC_REPOSITORY_URL
        value: $(params.iacRepositoryUrl)
      - name: PARAM_USER_HOME
        value: $(params.userHome)
      - name: WORKSPACE_SSH_DIRECTORY_BOUND
        value: $(workspaces.ssh-directory.bound)
      - name: WORKSPACE_SSH_DIRECTORY_PATH
        value: $(workspaces.ssh-directory.path)
      - name: PROJECT_DIR
        value: $(params.projectDir)
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi

        export versionFile=/workspace/code-source/latest_tag.env

        # controllo se esiste il file della versione
        if [ -e "${versionFile}" ]; then
  
          echo "recupero la nuova versione dal file ${versionFile}"
          source /workspace/code-source/latest_tag.env
          echo "get the latest_tag: ${latest_tag}"

          if [[ ${latest_tag} == *"beta"* ]]; then
  
            if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
              cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
              chmod 700 "${PARAM_USER_HOME}"/.ssh
              chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
            fi

            # controlla se esiste un vecchio clone e nel caso lo cancella
            if [ -d "${PROJECT_DIR}" ]; then
              echo "clean dir ${PROJECT_DIR}"
              rm -r "${PROJECT_DIR}"
            fi

            # Clona il repository IaC
            git clone ${IAC_REPOSITORY_URL} 
            cd ${PROJECT_DIR}

            #
            sed -i "s/^  tag: .*/  tag: \"${latest_tag}\"/" env/dev.values.yaml

            git config --global user.email "tekton@fake.com"
            git config --global user.name "tekton-update-version-task"

            git add env/dev.values.yaml
            git commit -m "update tag version (${latest_tag}) in file env/dev.values.yaml"
            git push

          else
            echo "Il file della versione[${versionFile}] esiste, ma non Ã¨ di sviluppo [beta], skip update iac"
          fi
        else
          echo "Il file della versione[${versionFile}] non esiste, skip update iac"
        fi    
